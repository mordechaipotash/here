-- Add missing columns to attachments if they don't exist
ALTER TABLE public.attachments 
  ADD COLUMN IF NOT EXISTS content_type TEXT,
  ADD COLUMN IF NOT EXISTS size BIGINT,
  ADD COLUMN IF NOT EXISTS storage_path TEXT,
  ADD COLUMN IF NOT EXISTS public_url TEXT,
  ADD COLUMN IF NOT EXISTS created_at TIMESTAMPTZ DEFAULT NOW();

-- Add missing columns to pdf_pages
ALTER TABLE public.pdf_pages 
  ADD COLUMN IF NOT EXISTS image_url TEXT,
  ADD COLUMN IF NOT EXISTS created_at TIMESTAMPTZ DEFAULT NOW();

-- Set NOT NULL constraints after adding columns
ALTER TABLE public.attachments 
  ALTER COLUMN content_type SET NOT NULL,
  ALTER COLUMN size SET NOT NULL,
  ALTER COLUMN storage_path SET NOT NULL,
  ALTER COLUMN public_url SET NOT NULL,
  ALTER COLUMN created_at SET NOT NULL;

ALTER TABLE public.pdf_pages 
  ALTER COLUMN image_url SET NOT NULL,
  ALTER COLUMN created_at SET NOT NULL;

-- Add indexes
CREATE INDEX IF NOT EXISTS idx_attachments_email_id ON public.attachments(email_id);
CREATE INDEX IF NOT EXISTS idx_attachments_filename ON public.attachments(filename);

-- Enable RLS
ALTER TABLE public.attachments ENABLE ROW LEVEL SECURITY;

-- Add RLS policies
CREATE POLICY "Users can view their own attachments"
    ON public.attachments FOR SELECT
    USING (EXISTS (
        SELECT 1 FROM public.emails
        WHERE emails.email_id = attachments.email_id
        AND emails.user_id = auth.uid()
    ));

CREATE POLICY "Users can insert their own attachments"
    ON public.attachments FOR INSERT
    WITH CHECK (EXISTS (
        SELECT 1 FROM public.emails
        WHERE emails.email_id = attachments.email_id
        AND emails.user_id = auth.uid()
    ));

CREATE POLICY "Users can update their own attachments"
    ON public.attachments FOR UPDATE
    USING (EXISTS (
        SELECT 1 FROM public.emails
        WHERE emails.email_id = attachments.email_id
        AND emails.user_id = auth.uid()
    ));

CREATE POLICY "Users can delete their own attachments"
    ON public.attachments FOR DELETE
    USING (EXISTS (
        SELECT 1 FROM public.emails
        WHERE emails.email_id = attachments.email_id
        AND emails.user_id = auth.uid()
    ));
